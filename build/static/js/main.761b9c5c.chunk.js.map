{"version":3,"sources":["InfoBox.js","util.js","Map.js","InitialMap.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","active","isRed","isGreen","isOrange","total","isBlue","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","tests","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","attribution","url","StartMap","Table","src","alt","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","urlCondition","lastDataPoint","chartData","message","date","newDataPoint","x","y","push","timeline","LineGraph","borderColor","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","App","setCountries","initial","setInitial","setInputCountry","countryName","setCountryName","setUrlCondition","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","casesName","setCasesName","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","Helmet","content","property","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","InitialMap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761b9c5c.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({\n  title,\n  cases,\n  active,\n  isRed,\n  isGreen,\n  isOrange,\n  isBlue,\n  total,\n  ...props\n}) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"}\n      } ${isRed && \"infoBox--red\"} ${isGreen && \"infoBox--green\"} ${\n        isOrange && \"infoBox--orange\"\n      }`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox_title\" color=\"initial\">\n          {title}\n        </Typography>\n\n        <h2\n          className={`infoBox_cases ${isRed && \"infoBox_cases--red\"} ${\n            isOrange && \"infoBox_cases--orange\"\n          } ${isGreen && \"infoBox_cases--green\"}`}\n        >\n          {cases}\n        </h2>\n\n        <Typography className=\"infoBox_total\" color=\"primary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  tests: {\n    hex: \"#0099ff\",\n    multiplier: 200,\n  },\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 200,\n  },\n  recovered: {\n    hex: \"#3fe422\",\n    multiplier: 300,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    multiplier: 800,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\n// to format case stats\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n// to draw circles on the map using interative tooltips\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction StartMap({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default StartMap;\n","import numeral from \"numeral\";\nimport React from \"react\";\nimport \"./Table.css\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases, countryInfo }) => (\n        <tr>\n          <td>\n            <img className=\"country_image\" src={countryInfo.flag} alt=\"logo\" />\n            <strong>{country}</strong>\n          </td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType, urlCondition) => {\n  let chartData = [];\n  let lastDataPoint;\n  if (\n    data.message === \"Country not found or doesn't have any historical data\"\n  ) {\n    urlCondition = \"all\";\n  }\n\n  if (urlCondition === \"all\") {\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n  } else if (urlCondition !== \"all\") {\n    for (let date in data.timeline.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data.timeline[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data.timeline[casesType][date];\n    }\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType, className, urlCondition }) {\n  let color = \"\";\n  let borderColor = \"\";\n  if (casesType === \"cases\") {\n    color = \"rgba(204, 16, 52, 0.5)\";\n    borderColor = \"#CC1034\";\n  } else if (casesType === \"recovered\") {\n    color = \"rgba(177, 255, 153, 0.5)\";\n    borderColor = \"#40ff00\";\n  } else if (casesType === \"deaths\") {\n    color = \"rgba(252, 131, 131, 0.5)\";\n    borderColor = \"#fa3838\";\n  }\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\n        `https://disease.sh/v3/covid-19/historical/${urlCondition}?lastdays=120`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType, urlCondition);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType, urlCondition]);\n\n  return (\n    <div className={className}>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: color,\n                borderColor: borderColor,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import \"./App.css\";\nimport {\n  Card,\n  CardContent,\n  FormControl,\n  MenuItem,\n  Select,\n} from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport InitialMap from \"./InitialMap\";\nimport Table from \"./Table\";\nimport { prettyPrintStat, sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nimport { Helmet } from \"react-helmet\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [initial, setInitial] = useState(1);\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryName, setCountryName] = useState(\"Worldwide\");\n  const [urlCondition, setUrlCondition] = useState(\"all\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState();\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [casesName, setCasesName] = useState(\"Cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United State, India, United Kingdom\n            value: country.countryInfo.iso2, // USA, FR, UK\n            flag: country.countryInfo.flag,\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, [countries]);\n\n  const onCountryChange = async (e) => {\n    setInitial(0);\n    const countryCode = e.target.value;\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode === \"worldwide\") {\n          setMapCenter([23.8859, 45.0792]);\n          setMapZoom(2);\n          setCountryName(\"Worldwide\");\n          setUrlCondition(\"all\");\n        } else {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n          setCountryName(data.country);\n          setUrlCondition(countryCode);\n        }\n      });\n  };\n\n  const initialMap = () => {\n    if (initial === 1) {\n      return (\n        <InitialMap\n          casesType={casesType}\n          countries={mapCountries}\n          center={[23.8859, 45.0792]}\n          zoom={2}\n        />\n      );\n    } else if (initial === 0) {\n      return (\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      );\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <Helmet>\n        <title>Covid-19 Live Tracker</title>\n        <meta name=\"description\" content=\"Covid-19 Live Tracker\" />\n        <meta\n          name=\"title\"\n          property=\"og:title\"\n          content=\"Covid-19 Live Tracker\"\n        />\n        <meta property=\"og:type\" content=\"Website\" />\n        <meta\n          name=\"image\"\n          property=\"og:image\"\n          content=\"https://live.staticflickr.com/65535/51209142753_d692e1412d_k.jpg\"\n        />\n        <meta\n          name=\"description\"\n          property=\"og:description\"\n          content=\"Covid-19 Live Tracker App\"\n        />\n        <meta name=\"author\" content=\"Dishant Behera\" />\n      </Helmet>\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID-19 LIVE TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app_stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => {\n              setCasesType(\"cases\");\n              setCasesName(\"Cases\");\n            }}\n            title=\"Confirmed\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={(e) => {\n              setCasesType(\"recovered\");\n              setCasesName(\"Recovered\");\n            }}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isOrange\n            active={casesType === \"deaths\"}\n            onClick={(e) => {\n              setCasesType(\"deaths\");\n              setCasesName(\"Deaths\");\n            }}\n            title=\"Deceased\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        {initialMap()}\n      </div>\n\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app_graphTitle\">\n            {countryName} New {casesName}\n          </h3>\n          <LineGraph\n            urlCondition={urlCondition}\n            className=\"app_graph\"\n            casesType={casesType}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}